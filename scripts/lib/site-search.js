// Generated by CoffeeScript 1.4.0
(function() {
  var SearchResult,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.searchTimeout = null;

  $(document).ready(function() {
    var query;
    query = new RegExp('[\\?&]' + 'query' + '=([^&#]*)').exec(window.location.href);
    if (query !== null) {
      performSearch(decodeURIComponent(query[1].replace(/[+]/gi, ' ')));
    }
    return $('#search-query').on('keyup', function(e) {
      return performSearch($(this).val());
    });
  });

  window.performSearch = function(query) {
    var result;
    $('#search-results').empty();
    if (query.isEmpty() === true) {
      $('#search-results').append('Enter something to search for');
      return;
    }
    result = new SearchResult(query);
    return result.search();
  };

  String.prototype.isEmpty = function() {
    if (this.replace(/\s/g, '') === '') {
      return true;
    }
    return false;
  };

  SearchResult = (function() {

    function SearchResult(searchTerm) {
      this.searchTerm = searchTerm;
      this.search = __bind(this.search, this);

      this.renderResult = __bind(this.renderResult, this);

      this.getPosts = __bind(this.getPosts, this);

      this.getPostIDs = __bind(this.getPostIDs, this);

      this.loadIndexes = __bind(this.loadIndexes, this);

      this.getIndexURLs = __bind(this.getIndexURLs, this);

      this.parseWords = __bind(this.parseWords, this);

      this.stemmedWords = this.parseWords(searchTerm);
    }

    SearchResult.prototype.parseWords = function(query) {
      var sWords, word, words, _i, _len;
      words = query.toLowerCase().match(/\w{2,}/gi);
      sWords = [];
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        if (__indexOf.call(sWords, word) < 0) {
          sWords.push(stemmer(word));
        }
      }
      return sWords;
    };

    SearchResult.prototype.getIndexURLs = function() {
      var indexURLs, temp, word, _i, _len, _ref;
      indexURLs = {};
      _ref = this.stemmedWords;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        temp = "/search/terms/" + (word.slice(0, 2).toLowerCase()) + ".json";
        indexURLs[temp] = null;
      }
      return indexURLs;
    };

    SearchResult.prototype.loadIndexes = function(indexURLs) {
      var file, _results;
      _results = [];
      for (file in indexURLs) {
        _results.push($.getJSON(file, this.getPostIDs));
      }
      return _results;
    };

    SearchResult.prototype.getPostIDs = function(data) {
      var id, postData, postID, sortable, term, _i, _len, _ref;
      postData = {};
      for (term in data) {
        if ($.inArray(term, this.stemmedWords) !== -1) {
          _ref = data[term];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            if (typeof postData[id] === 'undefined') {
              postData[id] = 1;
            } else {
              postData[id]++;
            }
          }
        }
      }
      sortable = [];
      for (postID in postData) {
        sortable.push([postID, postData[postID]]);
      }
      this.posts = sortable.sort(function(a, b) {
        return b[1] - a[1];
      });
      return this.getPosts();
    };

    SearchResult.prototype.getPosts = function() {
      var post, _i, _len, _ref, _results;
      if (this.posts.length > 0) {
        _ref = this.posts;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          post = _ref[_i];
          _results.push($.get("/search/posts/" + post[0] + ".html", this.renderResult));
        }
        return _results;
      } else {
        return this.renderResult('<p>No results found</p>');
      }
    };

    SearchResult.prototype.renderResult = function(data) {
      return $('#search-results').append(data);
    };

    SearchResult.prototype.search = function() {
      return this.loadIndexes(this.getIndexURLs());
    };

    return SearchResult;

  })();

}).call(this);
